<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拾艺空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-30T03:03:09.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴门山人</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每个前端开发工程师应该知道的那些JS操作</title>
    <link href="http://yoursite.com/2018/05/30/20180530/"/>
    <id>http://yoursite.com/2018/05/30/20180530/</id>
    <published>2018-05-30T01:44:02.000Z</published>
    <updated>2018-05-30T03:03:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为前端开发的三驾马车的JS，对每一个开发者来说并不陌生，日常工作中打交道最多的估计就是它了，不管你是原生开发还是借助于框架，它永远是重头戏，今天就来分享一些JS开发中常用的一些方法吧！</p><h5 id="1、获取和设置url参数"><a href="#1、获取和设置url参数" class="headerlink" title="1、获取和设置url参数"></a>1、获取和设置url参数</h5><p>这个操作应该是很常见的了，我们在开发的过程中，绝大部分时候（尤其是那种列表跳转到详情页面，更多时候参数是从url地址中带过去的），而对于详情页面很多是够就是要从带过来的参数中选择一些来请求接口的，这样的话，这个方法就发挥它的优势了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//  获取url参数</span><br><span class="line">//  getUrlt(<span class="string">'baidu.com/write?draftId=123456'</span>)</span><br><span class="line">//  Object&#123; draftId: <span class="string">"123456"</span>&#125;</span><br><span class="line"><span class="keyword">function</span> getUrlt(url) &#123;</span><br><span class="line">  url = url ? url : window.location.href</span><br><span class="line">  <span class="built_in">let</span> _paUrl = url.substring(url.indexOf(<span class="string">'?'</span>) + 1), _arrS = _paUrl.split(<span class="string">'&amp;'</span>), _rs = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> i = 0, _len = _arrS.length; i &lt; _len; i++) &#123;</span><br><span class="line">    <span class="built_in">let</span> pos = _arrS[i].indexOf(<span class="string">'='</span>)</span><br><span class="line">    <span class="keyword">if</span> (pos == -1) &#123;</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> name = _arrS[i].substring(0, pos), value = window.decodeURIComponent(_arrS[i].substring(pos + 1))</span><br><span class="line">    _rs[name] = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> _rs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  设置url参数</span><br><span class="line">//  setUrl(&#123;<span class="string">'a'</span>:1,<span class="string">'b'</span>:2&#125;)</span><br><span class="line">//  a=1&amp;b=2</span><br><span class="line"><span class="keyword">function</span> setUrl(obj) &#123;</span><br><span class="line">  <span class="built_in">let</span> _rs = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[p] != null &amp;&amp; obj[p] != <span class="string">''</span>) &#123;</span><br><span class="line">      _rs.push(p + <span class="string">'='</span> + obj[p])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> _rs.join(<span class="string">'&amp;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2、rem适配移动端"><a href="#2、rem适配移动端" class="headerlink" title="2、rem适配移动端"></a>2、rem适配移动端</h5><p>移动端的开发对于很多人来说，尤其是缺乏经验的刚入门的小伙伴来说，怎么样能够将UI设计稿适配到各种机型上是很头痛的一件事情，当然了百度上面一搜索也有各种各样的解决方案，但是从我自己的经验来说，我还是喜欢一下的这套方案的，那就是动态的去设置根字体大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getFontSize</span></span>()&#123;</span><br><span class="line">  var doc=document,win=window</span><br><span class="line">  var docEl = doc.documentElement,</span><br><span class="line">  resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> window ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">  recalc = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    var clientWidth = docEl.clientWidth</span><br><span class="line">    <span class="keyword">if</span> (!clientWidth) <span class="built_in">return</span>;</span><br><span class="line">    // 如果屏幕大于750（750是根据我效果图设置的，具体数值参考效果图），就设置clientWidth=750，防止font-size会超过100px</span><br><span class="line">    <span class="keyword">if</span>(clientWidth&gt;750)&#123;clientWidth=750&#125;</span><br><span class="line">    // 设置根元素font-size大小</span><br><span class="line">    docEl.style.fontSize = 100 * (clientWidth / 750) + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line">  // 屏幕大小改变，或者横竖屏切换时，触发函数</span><br><span class="line">  win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>)</span><br><span class="line">  // 文档加载完成时，触发函数</span><br><span class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">// 使用方式很简单，比如效果图上，有张图片。宽高都是100px</span><br><span class="line">// 样式写法就是</span><br><span class="line">img&#123;</span><br><span class="line">  width: 1rem;</span><br><span class="line">  height: 1rem;</span><br><span class="line">&#125;</span><br><span class="line">// 这样的设置，比如在屏幕宽度大于等于750px设备上，1rem=100px；图片显示就是宽高都是100px</span><br></pre></td></tr></table></figure></p><h5 id="3、Cookie操作"><a href="#3、Cookie操作" class="headerlink" title="3、Cookie操作"></a>3、Cookie操作</h5><p>这个操作就不用多说了，大家都应该要会的，虽然说在JQ年代里，有这样的插件可以拿来用，但是对于一些小的项目引进一个插件就有点多此一举了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 设置cookie</span><br><span class="line"><span class="keyword">function</span> setCookie(name,value,iDay)&#123;</span><br><span class="line">  var oDate=new Date()</span><br><span class="line">  oDate.setDate(oDate.getDate()+iDay)</span><br><span class="line">  document.cookie=name+<span class="string">'='</span>+value+<span class="string">';expires='</span>+oDate</span><br><span class="line">&#125;</span><br><span class="line">// 获取cookie</span><br><span class="line"><span class="keyword">function</span> getCookie(name)&#123;</span><br><span class="line">  var arr=document.cookie.split(<span class="string">'; '</span>)</span><br><span class="line">  <span class="keyword">for</span>(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    var arr2=arr[i].split(<span class="string">'='</span>)</span><br><span class="line">    <span class="keyword">if</span>(arr2[0]==name)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">return</span> arr2[1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">// 删除cookie</span><br><span class="line"><span class="keyword">function</span> removeCookie(name)&#123;</span><br><span class="line">  setCookie(name,1,-1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="4、去除字符串空格"><a href="#4、去除字符串空格" class="headerlink" title="4、去除字符串空格"></a>4、去除字符串空格</h5><p>这个应该是最常用的，尤其是在表单操作的时候，当然了虽然JS也有 <font color="red">trim() </font>这个方法，但是下面的这个方式还是知道最好，万一面试的时候需要呢<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> trimStr(str,<span class="built_in">type</span>)&#123;</span><br><span class="line">  switch (<span class="built_in">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> 1:<span class="built_in">return</span> str.replace(/\s+/g,<span class="string">""</span>) // 所有空格</span><br><span class="line">    <span class="keyword">case</span> 2:<span class="built_in">return</span> str.replace(/(^\s*)|(\s*$)/g, <span class="string">""</span>) // 前后空格</span><br><span class="line">    <span class="keyword">case</span> 3:<span class="built_in">return</span> str.replace(/(^\s*)/g, <span class="string">""</span>) // 前空格</span><br><span class="line">    <span class="keyword">case</span> 4:<span class="built_in">return</span> str.replace(/(\s*$)/g, <span class="string">""</span>) // 后空格</span><br><span class="line">    default:<span class="built_in">return</span> str</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5、冒泡排序"><a href="#5、冒泡排序" class="headerlink" title="5、冒泡排序"></a>5、冒泡排序</h5><p>冒泡排序应当是在面试过程中经常被问到的，实现的方式也有很多，下面分享的这种是先外循环正序遍历, 接着内循环逆序遍历, 从而实现目标<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> swap(i,j,array)&#123;</span><br><span class="line">  var temp = array[j]</span><br><span class="line">  array[j] = array[i]</span><br><span class="line">  array[i] = temp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> bubbleSort(array) &#123;</span><br><span class="line">  var length = array.length</span><br><span class="line">  var isPass</span><br><span class="line">  <span class="keyword">for</span> (var i = 0; i &lt; length; i++) &#123;  // 正序</span><br><span class="line">    isPass = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (var j = length - 1; j &gt;= i+1; j--) &#123;  // 逆序</span><br><span class="line">      array[j] &lt; array[j-1] &amp;&amp; (isPass = <span class="literal">true</span>) &amp;&amp; swap(j,j-1,array)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!isPass)</span><br><span class="line">      <span class="built_in">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="6、数组去重、最大值、最小值"><a href="#6、数组去重、最大值、最小值" class="headerlink" title="6、数组去重、最大值、最小值"></a>6、数组去重、最大值、最小值</h5><p>这个就不说了，直接上代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">set</span> = new Set(array)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> removeRepeatArray(arr)&#123;</span><br><span class="line">  <span class="built_in">return</span> Array.from(new Set(arr))</span><br><span class="line">&#125;</span><br><span class="line">// 最大</span><br><span class="line"><span class="keyword">function</span> maxArr(arr)&#123;</span><br><span class="line">  <span class="built_in">return</span> Math.max.apply(null,arr)</span><br><span class="line">&#125;</span><br><span class="line">// 最小</span><br><span class="line"><span class="keyword">function</span> minArr(arr)&#123;</span><br><span class="line">  <span class="built_in">return</span> Math.min.apply(null,arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上只是很小的一部分，还有大量的就靠你们自己去采坑了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为前端开发的三驾马车的JS，对每一个开发者来说并不陌生，日常工作中打交道最多的估计就是它了，不管你是原生开发还是借助于框架，它永远是重头戏，今天就来分享一些JS开发中常用的一些方法吧！&lt;/p&gt;
&lt;h5 id=&quot;1、获取和设置url参数&quot;&gt;&lt;a href=&quot;#1、获取和设置
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用GitHub + Hexo 快速搭建属于自己的博客</title>
    <link href="http://yoursite.com/2018/05/29/20180524/"/>
    <id>http://yoursite.com/2018/05/29/20180524/</id>
    <published>2018-05-29T03:25:12.000Z</published>
    <updated>2018-05-29T03:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一步步慢慢的爬吧"><a href="#一步步慢慢的爬吧" class="headerlink" title="一步步慢慢的爬吧"></a>一步步慢慢的爬吧</h2><h3 id="1、安装Node-、Git"><a href="#1、安装Node-、Git" class="headerlink" title="1、安装Node 、Git"></a>1、安装Node 、Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 作为一个前端开发者就不说了</span><br></pre></td></tr></table></figure><h3 id="2、安装Hexo脚手架-在本地生成页面"><a href="#2、安装Hexo脚手架-在本地生成页面" class="headerlink" title="2、安装Hexo脚手架,在本地生成页面"></a>2、安装Hexo脚手架,在本地生成页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ 全局安装(这里我选择npm,你也可以试一下yarn)：npm i -g hexo-cli</span><br><span class="line">$ 局部安装：</span><br><span class="line"><span class="built_in">cd</span> desktop</span><br><span class="line">mkdir Hexo</span><br><span class="line"><span class="built_in">cd</span> Hexo</span><br><span class="line">hexo i my-blog // i是初始化init的缩写 my-blog则是我们自己给博客起的名字</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">hexo -g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="3、打开浏览器输入：http-localhost-4000-（不出问题的话就会出现下图所见的页面了）"><a href="#3、打开浏览器输入：http-localhost-4000-（不出问题的话就会出现下图所见的页面了）" class="headerlink" title="3、打开浏览器输入：http://localhost:4000/（不出问题的话就会出现下图所见的页面了）"></a>3、打开浏览器输入：<a href="http://localhost:4000/（不出问题的话就会出现下图所见的页面了）" target="_blank" rel="noopener">http://localhost:4000/（不出问题的话就会出现下图所见的页面了）</a></h3><p><img src="https://s1.ax1x.com/2018/05/24/CWJuJs.jpg" alt="CWJuJs.jpg"></p><p>现在你已经可以在这个主题下写博客了。当然，作为一个前端开发工程师我想你肯定是不喜欢这样的。肯定是要换皮肤的，这里我就以：<font color="red">next</font> 这个皮肤主题简单说说吧，这个也是很多用hexo搭建起来的个人网站非常喜欢的，我自己也喜欢，如下图所示：简单、清爽</p><p><img src="http://i2.bvimg.com/646977/1d23da559a72a488.jpg" alt="Markdown"></p><h3 id="4、next主题安装选择"><a href="#4、next主题安装选择" class="headerlink" title="4、next主题安装选择"></a>4、next主题安装选择</h3><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next</a>主题选择有三种选择，上图所示的是最简洁的一种，三种样式主题分别是：</p><ul><br>  <li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><br>  <li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><br>  <li>Pisces - 双栏 Scheme，小家碧玉似的清新</li><br></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ 主题安装：命令行进入根目录</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">输入：git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>安装完成后,用编辑器打开项目，找到根目录下面的配置文件：<font color="red">_config.yml</font>，这个时候我们会发现根目录下的themes文件夹多了一个next文件，这就是刚刚下载的主题：然后我们修改如图所示的地方，将主题替换：然后我们再在命令行运行下面的命令：<br><img src="http://i2.bvimg.com/646977/8d5557b342f4420f.jpg" alt="Markdown"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  $  hexo clean  //清除缓存</span><br><span class="line">  $  hexo g  //重新生成代码</span><br><span class="line">  $  hexo s  //部署到本地</span><br><span class="line"></span><br><span class="line">//然后打开浏览器访问 localhost:4000 查看效果</span><br></pre></td></tr></table></figure><p><img src="http://i2.bvimg.com/646977/1d23da559a72a488.jpg" alt="Markdown"></p><p>到这里，本地对的开发配置就差不多了，接下来就轮到怎么样在GitHub上面显示了</p><h3 id="5、在GitHub上面创建一个仓库（前提是你已经有github账号了）"><a href="#5、在GitHub上面创建一个仓库（前提是你已经有github账号了）" class="headerlink" title="5、在GitHub上面创建一个仓库（前提是你已经有github账号了）"></a>5、在GitHub上面创建一个仓库（前提是你已经有github账号了）</h3><p>登录到GitHub,按照如图所示，创建一个仓库（注意后面的命名，最好选择和前面的一样，不然到时候域名地址会很长），按照这个操作 ，不出问题的话应该就可以看到一个网站了</p><p><img src="http://i1.bvimg.com/646977/72d2dcfb28a254e4.png" alt="Markdown"></p><p><img src="http://i1.bvimg.com/646977/b0b659a86844a004.png" alt="Markdown"><br>PS: <font color="red">上面的报红是因为我已经创建了一个相同名字的仓库了，你只要给自己起一个名字就可以了</font></p><p><img src="http://i4.bvimg.com/646977/dda3a13a0668e96f.jpg" alt="Markdown"></p><p><img src="http://i4.bvimg.com/646977/1b3dcaf711dec746.jpg" alt="Markdown"></p><p><img src="http://i4.bvimg.com/646977/46f99f78cdc61c0e.jpg" alt="Markdown"></p><p>PS: <font color="red">最好还是选择一个，不然就是一个空白页面</font></p><h3 id="6、本地代码上传到创建的远程仓库"><a href="#6、本地代码上传到创建的远程仓库" class="headerlink" title="6、本地代码上传到创建的远程仓库"></a>6、本地代码上传到创建的远程仓库</h3><p>在项目根目录找到配置文件，在如图所示的地方修改：</p><p><img src="http://i2.bvimg.com/646977/baf13c17c8d297dc.jpg" alt="Markdown"></p><p>这个时候要装一个Hexo提供的一个插件：<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">hexo-deployer-git</a>，这个插件是为了快速方便的一键部署到gitHub上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-deployer-git -s</span><br></pre></td></tr></table></figure><p>安装完后运行下面的命令：不报错的话一会儿就会发布到远端了（但是可能不一定立马生效，稍微等几分钟）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clear //清除</span><br><span class="line">$ hexo g //生成静态页面</span><br><span class="line">$ hexo d //发布</span><br></pre></td></tr></table></figure><p><img src="http://i2.bvimg.com/646977/28ff08445f23c71f.jpg" alt="Markdown"></p><p>几分钟后打开你的网站，应该就可以看到你本地的效果了（下图是我自己的）：是不是觉得很简单，当然这个应该是最基础的了</p><p><img src="http://i2.bvimg.com/646977/26fc0055262aa2c0.jpg" alt="Markdown"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一步步慢慢的爬吧&quot;&gt;&lt;a href=&quot;#一步步慢慢的爬吧&quot; class=&quot;headerlink&quot; title=&quot;一步步慢慢的爬吧&quot;&gt;&lt;/a&gt;一步步慢慢的爬吧&lt;/h2&gt;&lt;h3 id=&quot;1、安装Node-、Git&quot;&gt;&lt;a href=&quot;#1、安装Node-、Git&quot; c
      
    
    </summary>
    
    
  </entry>
  
</feed>
