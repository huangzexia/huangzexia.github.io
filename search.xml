<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[每个前端开发工程师应该知道的那些JS操作]]></title>
    <url>%2F2018%2F05%2F30%2F20180530%2F</url>
    <content type="text"><![CDATA[作为前端开发的三驾马车的JS，对每一个开发者来说并不陌生，日常工作中打交道最多的估计就是它了，不管你是原生开发还是借助于框架，它永远是重头戏，今天就来分享一些JS开发中常用的一些方法吧！ 1、获取和设置url参数这个操作应该是很常见的了，我们在开发的过程中，绝大部分时候（尤其是那种列表跳转到详情页面，更多时候参数是从url地址中带过去的），而对于详情页面很多是够就是要从带过来的参数中选择一些来请求接口的，这样的话，这个方法就发挥它的优势了1234567891011121314151617181920212223242526272829// 获取url参数// getUrlt('baidu.com/write?draftId=123456')// Object&#123; draftId: "123456"&#125;function getUrlt(url) &#123; url = url ? url : window.location.href let _paUrl = url.substring(url.indexOf('?') + 1), _arrS = _paUrl.split('&amp;'), _rs = &#123;&#125; for (let i = 0, _len = _arrS.length; i &lt; _len; i++) &#123; let pos = _arrS[i].indexOf('=') if (pos == -1) &#123; continue &#125; let name = _arrS[i].substring(0, pos), value = window.decodeURIComponent(_arrS[i].substring(pos + 1)) _rs[name] = value &#125; return _rs&#125;// 设置url参数// setUrl(&#123;'a':1,'b':2&#125;)// a=1&amp;b=2function setUrl(obj) &#123; let _rs = []; for (let p in obj) &#123; if (obj[p] != null &amp;&amp; obj[p] != '') &#123; _rs.push(p + '=' + obj[p]) &#125; &#125; return _rs.join('&amp;');&#125; 2、rem适配移动端移动端的开发对于很多人来说，尤其是缺乏经验的刚入门的小伙伴来说，怎么样能够将UI设计稿适配到各种机型上是很头痛的一件事情，当然了百度上面一搜索也有各种各样的解决方案，但是从我自己的经验来说，我还是喜欢一下的这套方案的，那就是动态的去设置根字体大小123456789101112131415161718192021222324function getFontSize()&#123; var doc=document,win=window var docEl = doc.documentElement, resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize', recalc = function () &#123; var clientWidth = docEl.clientWidth if (!clientWidth) return; // 如果屏幕大于750（750是根据我效果图设置的，具体数值参考效果图），就设置clientWidth=750，防止font-size会超过100px if(clientWidth&gt;750)&#123;clientWidth=750&#125; // 设置根元素font-size大小 docEl.style.fontSize = 100 * (clientWidth / 750) + 'px' &#125; // 屏幕大小改变，或者横竖屏切换时，触发函数 win.addEventListener(resizeEvt, recalc, false) // 文档加载完成时，触发函数 doc.addEventListener('DOMContentLoaded', recalc, false)&#125;// 使用方式很简单，比如效果图上，有张图片。宽高都是100px// 样式写法就是img&#123; width: 1rem; height: 1rem;&#125;// 这样的设置，比如在屏幕宽度大于等于750px设备上，1rem=100px；图片显示就是宽高都是100px 3、Cookie操作这个操作就不用多说了，大家都应该要会的，虽然说在JQ年代里，有这样的插件可以拿来用，但是对于一些小的项目引进一个插件就有点多此一举了。12345678910111213141516171819202122// 设置cookiefunction setCookie(name,value,iDay)&#123; var oDate=new Date() oDate.setDate(oDate.getDate()+iDay) document.cookie=name+'='+value+';expires='+oDate&#125;// 获取cookiefunction getCookie(name)&#123; var arr=document.cookie.split('; ') for(var i=0;i&lt;arr.length;i++)&#123; var arr2=arr[i].split('=') if(arr2[0]==name) &#123; return arr2[1] &#125; &#125; return ''&#125;// 删除cookiefunction removeCookie(name)&#123; setCookie(name,1,-1)&#125; 4、去除字符串空格这个应该是最常用的，尤其是在表单操作的时候，当然了虽然JS也有 trim() 这个方法，但是下面的这个方式还是知道最好，万一面试的时候需要呢123456789function trimStr(str,type)&#123; switch (type)&#123; case 1:return str.replace(/\s+/g,"") // 所有空格 case 2:return str.replace(/(^\s*)|(\s*$)/g, "") // 前后空格 case 3:return str.replace(/(^\s*)/g, "") // 前空格 case 4:return str.replace(/(\s*$)/g, "") // 后空格 default:return str &#125;&#125; 5、冒泡排序冒泡排序应当是在面试过程中经常被问到的，实现的方式也有很多，下面分享的这种是先外循环正序遍历, 接着内循环逆序遍历, 从而实现目标123456789101112131415161718function swap(i,j,array)&#123; var temp = array[j] array[j] = array[i] array[i] = temp&#125;function bubbleSort(array) &#123; var length = array.length var isPass for (var i = 0; i &lt; length; i++) &#123; // 正序 isPass = false for (var j = length - 1; j &gt;= i+1; j--) &#123; // 逆序 array[j] &lt; array[j-1] &amp;&amp; (isPass = true) &amp;&amp; swap(j,j-1,array) &#125; if(!isPass) break &#125; return array&#125; 6、数组去重、最大值、最小值这个就不说了，直接上代码12345678910111213let set = new Set(array)function removeRepeatArray(arr)&#123; return Array.from(new Set(arr))&#125;// 最大function maxArr(arr)&#123; return Math.max.apply(null,arr)&#125;// 最小function minArr(arr)&#123; return Math.min.apply(null,arr)&#125; 以上只是很小的一部分，还有大量的就靠你们自己去采坑了]]></content>
  </entry>
  <entry>
    <title><![CDATA[利用GitHub + Hexo 快速搭建属于自己的博客]]></title>
    <url>%2F2018%2F05%2F29%2F20180524%2F</url>
    <content type="text"><![CDATA[一步步慢慢的爬吧1、安装Node 、Git1$ 作为一个前端开发者就不说了 2、安装Hexo脚手架,在本地生成页面123456789$ 全局安装(这里我选择npm,你也可以试一下yarn)：npm i -g hexo-cli$ 局部安装：cd desktopmkdir Hexocd Hexohexo i my-blog // i是初始化init的缩写 my-blog则是我们自己给博客起的名字cd my-bloghexo -ghexo s 3、打开浏览器输入：http://localhost:4000/（不出问题的话就会出现下图所见的页面了） 现在你已经可以在这个主题下写博客了。当然，作为一个前端开发工程师我想你肯定是不喜欢这样的。肯定是要换皮肤的，这里我就以：next 这个皮肤主题简单说说吧，这个也是很多用hexo搭建起来的个人网站非常喜欢的，我自己也喜欢，如下图所示：简单、清爽 4、next主题安装选择next主题选择有三种选择，上图所示的是最简洁的一种，三种样式主题分别是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 123$ 主题安装：命令行进入根目录cd my-blog输入：git clone https://github.com/iissnan/hexo-theme-next themes/next 安装完成后,用编辑器打开项目，找到根目录下面的配置文件：_config.yml，这个时候我们会发现根目录下的themes文件夹多了一个next文件，这就是刚刚下载的主题：然后我们修改如图所示的地方，将主题替换：然后我们再在命令行运行下面的命令： 12345 $ hexo clean //清除缓存 $ hexo g //重新生成代码 $ hexo s //部署到本地//然后打开浏览器访问 localhost:4000 查看效果 到这里，本地对的开发配置就差不多了，接下来就轮到怎么样在GitHub上面显示了 5、在GitHub上面创建一个仓库（前提是你已经有github账号了）登录到GitHub,按照如图所示，创建一个仓库（注意后面的命名，最好选择和前面的一样，不然到时候域名地址会很长），按照这个操作 ，不出问题的话应该就可以看到一个网站了 PS: 上面的报红是因为我已经创建了一个相同名字的仓库了，你只要给自己起一个名字就可以了 PS: 最好还是选择一个，不然就是一个空白页面 6、本地代码上传到创建的远程仓库在项目根目录找到配置文件，在如图所示的地方修改： 这个时候要装一个Hexo提供的一个插件：hexo-deployer-git，这个插件是为了快速方便的一键部署到gitHub上 1$ npm i hexo-deployer-git -s 安装完后运行下面的命令：不报错的话一会儿就会发布到远端了（但是可能不一定立马生效，稍微等几分钟） 123$ hexo clear //清除$ hexo g //生成静态页面$ hexo d //发布 几分钟后打开你的网站，应该就可以看到你本地的效果了（下图是我自己的）：是不是觉得很简单，当然这个应该是最基础的了]]></content>
  </entry>
</search>
